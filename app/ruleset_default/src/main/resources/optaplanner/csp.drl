package optaplanner

// ------------------------------------ IMPORT --------------------------------------
import at.jku.dke.ida.app.ruleset.csp.domain.AnalysisSituation
import at.jku.dke.ida.app.ruleset.csp.RuleHelpers
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder

// ------------------------------------ GLOBAL --------------------------------------
global HardSoftScoreHolder scoreHolder;

// ------------------------------------ RULES ---------------------------------------
// ### EMPTY VALUES ###
rule "No cube set"
when
    AnalysisSituation(cube == null || cube.isEmpty())
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "No measure set"
when
    AnalysisSituation(measures == null)
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

// ### SAME CUBE ###
rule "All measures in same cube"
when
    AnalysisSituation(!RuleHelpers.allInCube(cube, measures))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "All levels in same cube"
when
    AnalysisSituation(!RuleHelpers.allInCube(cube, granularityLevels))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "All slice conditions in same cube"
when
    AnalysisSituation(!RuleHelpers.allInCube(cube, sliceConditions))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "All bmcs in same cube"
when
    AnalysisSituation(!RuleHelpers.allInCube(cube, baseMeasureConditions))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "All filters in same cube"
when
    AnalysisSituation(!RuleHelpers.allInCube(cube, filterConditions))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Maximum one granularity level per dimesion"
when
    AnalysisSituation(!RuleHelpers.maximumOneElementPerDimension(granularityLevels))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//rule "Maximum one assignment for a term"
//when
//    $as : AnalysisSituation()
//    eval(RuleHelpers.multipleAssignmentsPerTerm($as))
//then
//    scoreHolder.addSoftConstraintMatch(kcontext, RuleHelpers.getMultipleAssignmentsPerTermScore($as));
//end

rule "No duplicates"
when
    $as : AnalysisSituation()
    eval(RuleHelpers.containsDuplicates($as))
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1);
end


// ### SCORE ###
rule "Similarity Score"
when
    $as : AnalysisSituation(cube != null)
then
    scoreHolder.addSoftConstraintMatch(kcontext, $as.getScore());
end