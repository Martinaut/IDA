package app_rules

// ------------------------------------ IMPORT --------------------------------------
import at.jku.dke.ida.app.nlp.models.WordGroupsServiceModel
import at.jku.dke.ida.app.nlp.helpers.WordGroupsHelper
import at.jku.dke.ida.app.nlp.models.WordGroup

// ------------------------------------ RULES ---------------------------------------
rule "Word Groups - Find Noun Compounds"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:/NN.*/}=B >compound {tag:/NN.*/}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find nouns with adjectival modifier"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:/NN.*/}=B >amod {tag:/JJ/}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find words with nominal modifier"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=A >/nmod.*/ {}=C : {}=C >case {}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with A >dobj Z, Z <det B, Z <compound C"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=A >dobj {} : {} >det {}=B : {} >compound {}=C")) {
        insert(group);
    }
end

rule "Word Groups - Find words with A >dobj Z, Z <compound B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=A >dobj {} : {} >compound {}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with A >dobj B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=A >dobj {tag:/NN.*/}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with A >nummod B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:/NN.*/}=A >nummod {tag:CD}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with B >nummod C, B [>advmod|>amod] A"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:/NN.*/}=B >nummod {tag:CD}=C : {}=B [>advmod {}=A | >amod {}=A]")) {
        insert(group);
    }
end

rule "Word Groups - Find words with B >amod A"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=B >amod {tag:JJ}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find words with B >advmod A"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=B >advmod {tag:RB}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find words with X >conj A, X >dep B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{}=A </conj.*/ {} : {} >dep {}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with X > conj B, B >advmod A"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{} >/conj.*/ {}=B : {}=B >advmod {}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find words with C >advmod A, C >amod B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:NN}=C >advmod {}=A : {}=C >amod {}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with C >amod A, C >compound B"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:NN}=C >amod {}=A : {}=C >compound {tag:NN}=B")) {
        insert(group);
    }
end

rule "Word Groups - Find words with C >amod B >advmod A"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeSemgrex($model.getAnnotatedText(), "{tag:NN}=C >amod {}=B : {}=B >advmod {}=A")) {
        insert(group);
    }
end

rule "Word Groups - Find sibling nouns"
    agenda-group "word-groups"
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeTregex($model.getAnnotatedText(), "/NN.?/=A $+ /NN.?/=B")) {
        insert(group);
    }
end

rule "Word Groups - Find single nouns"
    agenda-group "word-groups"
    enabled false
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeTregex($model.getAnnotatedText(), "NP < /NN.?/=A")) {
        insert(group);
    }
end

rule "Word Groups - Find single noun phrases"
    agenda-group "word-groups"
    enabled false
when
    $model : WordGroupsServiceModel(language == "en")
then
    for (WordGroup group : WordGroupsHelper.executeTregex($model.getAnnotatedText(), "NP < /NN.?/=A & !(NP < (/NN.?/ $++ /NN.?/))")) {
        insert(group);
    }
end